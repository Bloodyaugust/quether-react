{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["iconMap","clear-day","clear-night","rain","snow","sleet","wind","fog","cloudy","partly-cloudy-day","partly-cloudy-night","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasPosition","position","coords","latitude","longitude","showContent","showError","weather","currently","daily","data","navigator","geolocation","getCurrentPosition","setState","setTimeout","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","ky","get","concat","json","sent","length","t0","console","log","stop","currentWeather","dailies","map","dailyData","index","react_default","createElement","className","key","Date","time","toLocaleDateString","weekday","icon","temperatureMax","temperatureMin","temperature","summary","windSpeed","humidity","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.875bf4e8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport ky from 'ky';\n\nconst iconMap = {\n  'clear-day': 'day-sunny',\n  'clear-night': 'night-clear',\n  'rain': 'rain',\n  'snow': 'snow',\n  'sleet': 'sleet',\n  'wind': 'strong-wind',\n  'fog': 'fog',\n  'cloudy': 'cloudy',\n  'partly-cloudy-day': 'day-cloudy',\n  'partly-cloudy-night': 'night-alt-cloudy'\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasPosition: false,\n      position: {\n        coords: {\n          latitude: 0,\n          longitude: 0\n        }\n      },\n      showContent: false,\n      showError: false,\n      weather: {\n        currently: {},\n        daily: { data: [] }\n      }\n    };\n\n    navigator.geolocation.getCurrentPosition((position) => {\n      this.setState({\n        hasPosition: true,\n        position: { latitude: position.coords.latitude, longitude: position.coords.longitude }\n      });\n    });\n\n    setTimeout(async () => {\n      if (this.state.hasPosition) {\n        try {\n          let weather = await ky.get(`https://cors-anywhere.herokuapp.com/https://quether.herokuapp.com/weather?lat=${this.state.position.latitude}&long=${this.state.position.longitude}`).json();\n\n          weather.weather.daily.data.length = 4;\n\n          this.setState({\n            showContent: true,\n            weather: weather.weather\n          });\n        } catch (error) {\n          console.log(error);\n          this.setState({\n            showError: true\n          });\n        }\n      } else {\n        this.setState({\n          showError: true\n        });\n      }\n    }, 500);\n  }\n\n  render() {\n    const state = this.state;\n    const currentWeather = state.weather.currently;\n    const dailies = state.weather.daily.data.map((dailyData, index) => {\n      return (\n        <div className=\"daily col s12 m3\" key={index}>\n          <div className=\"card blue-grey darken-4\">\n            <div className=\"card-content white-text\">\n              <span className=\"card-title\">{new Date(dailyData.time * 1000).toLocaleDateString('en-us', { weekday: 'short' })}</span>\n              <p className=\"weather-status\">\n                <i className={`wi wi-${iconMap[dailyData.icon] || 'clear-day'}`}></i>\n                <span className=\"weather-short-attributes\">{dailyData.temperatureMax}&#176;&nbsp;<span className=\"grey-text text-lighten-1\">{dailyData.temperatureMin}&#176;</span></span>\n              </p>\n            </div>\n          </div>\n        </div>\n      );\n    });\n\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>Quether</h1>\n          <h2>The Quick Weather App</h2>\n        </header>\n        <section className={`content container ${(state.showContent ? 'show' : '')}`}>\n          <div className=\"weather\">\n            <div className=\"row\">\n              <div className=\"current col s12 m6 offset-m3\">\n                <div className=\"card blue-grey darken-1\">\n                  <div className=\"card-content white-text\">\n                    <span className=\"card-title\">{new Date().toLocaleDateString('en-us', { weekday: 'long' })} (Today)</span>\n                    <p className=\"weather-status\">\n                      <i className={`wi wi-${iconMap[currentWeather.icon] || 'clear-day'}`}></i> {currentWeather.temperature}&#176;\n                    </p>\n                    <p className=\"weather-summary\">{currentWeather.summary}</p>\n                    <div className=\"row\">\n                      <div className=\"col s6 center-align\"><i className=\"wi wi-strong-wind\"></i> <span className=\"weather-attribute\">&nbsp;{currentWeather.windSpeed} MPH</span></div>\n                      <div className=\"col s6 center-align\"><i className=\"wi wi-humidity\"></i> <span className=\"weather-attribute\">&nbsp;{currentWeather.humidity}</span></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"row\">\n              {dailies}\n            </div>\n          </div>\n        </section>\n        <section className={`content container ${(state.showError ? 'show' : '')}`}>\n        <div className=\"geolocation row\">\n          <div className=\"current col s12 m6 offset-m3\">\n            <div className=\"card blue-grey darken-1\">\n              <div className=\"card-content\">\n                <span className=\"card-title red-text text-lighten-2\">An Error, There Is!</span>\n                <p className=\"red-text text-lighten-3\">\n                  While your location we are missing, get your weather: we cannot. Allow us to access it, then try again, you must.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n        </section>\n        <footer>\n          <span className=\"contact\">Questions? Contact me at greysonrichey (at) gmail (dot) com!</span>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}